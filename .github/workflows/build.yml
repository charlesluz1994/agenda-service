name: Build and deploy JAR app - agendaservice

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/agenda-service
  AKS_AGENDA_NAMESPACE: ${{ secrets.AKS_AGENDA_NAMESPACE }}

jobs:
  build-and-push:
    environment: prd
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java version
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build e Push da imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prd
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Login no Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Conectar ao cluster AKS
      - name: Set up kubectl
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      # Garantir que o namespace existe
      - name: Ensure namespace exists
        run: |
          kubectl get namespace ${{ env.AKS_AGENDA_NAMESPACE }} || kubectl create namespace ${{ env.AKS_AGENDA_NAMESPACE }}

      # Atualizar a tag da imagem no deployment.yaml
      - name: Update image tag in deployment
        run: |
          # Atualizar a imagem no arquivo deployment.yaml
          sed -i "s|image: ${{ env.DOCKER_IMAGE_NAME }}:.*|image: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}|g" deployment.yaml
          
          # Verificar a mudan√ßa
          echo "Deployment atualizado:"
          grep -n "image:" deployment.yaml

      # Deploy para o Kubernetes
      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment.yaml -n ${{ env.AKS_AGENDA_NAMESPACE }}

      # Aguardar o rollout
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/agenda-service -n ${{ env.AKS_AGENDA_NAMESPACE }} --timeout=300s

      # Verificar status dos pods
      - name: Check deployment status
        run: |
          kubectl get pods -n ${{ env.AKS_AGENDA_NAMESPACE }} -l app=agenda-service
          kubectl get services -n ${{ env.AKS_AGENDA_NAMESPACE }}